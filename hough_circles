from Tkinter import *
from PIL import Image, ImageTk
import tkFileDialog
import math
from collections import Counter


#transform
def tobit(pix, v = 126):
    if pix > v:
        return 0
    return 1

def tobits(lst, height, width):
    result = []
    for i in range(height):
        result.append(map(tobit,(lst[i*width:(i+1)*width])))
    return result

degree = 1 #округления для угла. Что-то надо с этим сделать...



def get_circles(im):
    im.load()
    #width,height = im.size
    img = tobits(list(im.getdata()),height,width)
    f = open("temp1.txt","w")
    for i in range(height):
        f.write(str(img[i])+"\n")
    f.close()

    acc2  = Counter() 
    maxth = 180
    diag = int(math.sqrt(height*height + width*width))
    maxd = 2*diag

    
    #прямые заданы длиной перпендикуляра d к ней и углом th между этим перпендикуляром и горизонтальной осью
    for y in range(height):
        for x in range(width):
            #каждая ненулевая точка "голосует" за прямые, которым может принадлежать
            if img[y][x] > 0:
                for y0 in range(height):
                    for x0 in range(width):
                        r = (x - x0)^2 + (y - y0)^2
                        acc2[(x0,y0,r)]


    return acc2

def _create_circle(self, x, y, r, **kwargs):
    return self.create_oval(x-r, y-r, x+r, y+r, **kwargs)
tk.Canvas.create_circle = _create_circle



def Quit(ev):
    global root
    root.destroy()

def LoadFile(ev):
    global canvas,im,circles,width,height,nmbLns
    fn = tkFileDialog.Open(root, filetypes = [('*.bmp files', '.bmp')]).show()
    if fn == '':
        return
    im = Image.open(fn)
    width,height = im.size

    nmbLines.config(state = NORMAL)
    nmbLines.delete(1.0,"1."+str(len(str(nmbLns))))
    nmbLns = 0
    nmbLines.insert(1.0,nmbLns)
    nmbLines.config(state = DISABLED)
    nmbLns2 = 0

    canvas.delete(ALL)
    canvas.background = ImageTk.PhotoImage(im)
    canvas.create_image((window_width - width)/2, (window_height - height)/2,image = canvas.background, anchor = NW)
    saveBtn.config(state = NORMAL)
    circles = get_circles(im)
    

    
    
def SaveFile(ev):
    fn = tkFileDialog.SaveAs(root, filetypes = [('*.bmp files', '.bmp')]).show()
    if fn == '':
        return
    if not fn.endswith(".bmp"):
        fn+=".bmp"
    im.save(fn)

panelFrame = Frame(root, height = 60, bg = 'gray')
imageFrame = Frame(root, width=window_width, height=window_height)

panelFrame.pack(side = 'bottom', fill = 'x')
imageFrame.pack(side = 'top', fill = 'both')

canvas = Canvas(imageFrame, width=window_width, height=window_height)
canvas.place(x = 0, y = 0,width = window_width, height=window_height)

loadBtn = Button(panelFrame, text = 'Load')
saveBtn = Button(panelFrame, text = 'Save', state = DISABLED)
quitBtn = Button(panelFrame, text = 'Quit')

loadBtn.bind("<Button-1>", LoadFile)
saveBtn.bind("<Button-1>", SaveFile)
quitBtn.bind("<Button-1>", Quit)

loadBtn.place(x = 10, y = 10, width = 40, height = 40)
#saveBtn.place(x = 60, y = 10, width = 40, height = 40)
quitBtn.place(x = 110, y = 10, width = 40, height = 40)

nmbLines = Text(panelFrame,font=('times',12))
nmbLines.insert(1.0,'0')
nmbLines.config(state = DISABLED)
moreBtn = Button(panelFrame, text = ">")

nmbLines.place(x = 210, y = 10, width = 40, height = 40)
moreBtn.place(x = 260, y = 10, width = 40, height = 40)



root.mainloop()
